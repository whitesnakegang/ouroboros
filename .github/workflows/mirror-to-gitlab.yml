name: Sync GitHub submodules into GitLab superproject

on:
  workflow_dispatch: {}          # 수동 실행 가능
  schedule:
    - cron: "0 */6 * * *"        # 6시간마다 자동 실행 (UTC 기준)

jobs:
  sync:
    runs-on: ubuntu-latest
    env:
      TARGET_REPO: https://oauth2:${{ secrets.GITLAB_PAT }}@lab.ssafy.com/s13-final/S13P31C102.git
      TARGET_BRANCH: main
      GIT_USER_NAME:  ${{ secrets.GIT_USER_NAME }}
      GIT_USER_EMAIL: ${{ secrets.GIT_USER_EMAIL }}

      # 서브모듈 정의
      MOD1_NAME: OuroHead
      MOD1_URL:  https://github.com/whitesnakegang/OuroHead.git
      MOD1_PATH: OuroHead
      MOD1_BRANCH: main

      MOD2_NAME: OuroTail
      MOD2_URL:  https://github.com/whitesnakegang/OuroTail.git
      MOD2_PATH: OuroTail
      MOD2_BRANCH: main

      MOD3_NAME: ouroboros
      MOD3_URL:  https://github.com/whitesnakegang/ouroboros.git
      MOD3_PATH: ouroboros
      MOD3_BRANCH: main

    steps:
      - name: Clone GitLab superproject
        run: |
          set -euo pipefail
          git clone "$TARGET_REPO" super
          cd super
          git checkout -B "$TARGET_BRANCH" || git checkout "$TARGET_BRANCH"
          git config user.name  "$GIT_USER_NAME"
          git config user.email "$GIT_USER_EMAIL"

      - name: Ensure submodules exist (auto-convert if folder pre-exists)
        working-directory: super
        run: |
          set -euo pipefail

          add_or_fix () {
            local name=$1 url=$2 path=$3 branch=$4

            # 이미 서브모듈인지 확인 (.git 파일 존재)
            if [ -f "$path/.git" ]; then
              echo "==> $path already a submodule"
            else
              if [ -d "$path" ]; then
                # 일반 폴더로 차지 중이면 임시로 이동했다가 서브모듈로 교체
                echo "==> $path exists as a normal folder. Converting to submodule..."
                tmp="${path}.backup.$(date +%s)"
                git mv "$path" "$tmp"
                git commit -m "chore: temp move $path to $tmp for submodule conversion"
                git submodule add -b "$branch" "$url" "$path"
                # 기존 내용은 제거(필요시 머지 로직으로 교체 가능)
                git rm -r "$tmp"
                git commit -m "refactor: replace $path folder with git submodule"
              else
                echo "==> Adding submodule $name at $path (branch=$branch)"
                git submodule add -b "$branch" "$url" "$path"
              fi
            fi

            # .gitmodules URL/브랜치 고정
            git config -f .gitmodules submodule.$path.url "$url"
            git config -f .gitmodules submodule.$path.branch "$branch"
          }

          add_or_fix "$MOD1_NAME" "$MOD1_URL" "$MOD1_PATH" "$MOD1_BRANCH"
          add_or_fix "$MOD2_NAME" "$MOD2_URL" "$MOD2_PATH" "$MOD2_BRANCH"
          add_or_fix "$MOD3_NAME" "$MOD3_URL" "$MOD3_PATH" "$MOD3_BRANCH"

          git submodule sync --recursive

      - name: Update all submodules to latest branch tips
        working-directory: super
        run: |
          set -euo pipefail
          git submodule update --init --recursive

          update_to_branch () {
            local path=$1 branch=$2
            echo "==> Updating $path to $branch"
            cd "$path"
            # 원격 최신 상태 반영
            git fetch origin "$branch" --tags --prune
            git checkout "$branch" || git checkout -B "$branch" "origin/$branch"
            git pull --ff-only origin "$branch" || true
            cd - >/dev/null
          }

          update_to_branch "$MOD1_PATH" "$MOD1_BRANCH"
          update_to_branch "$MOD2_PATH" "$MOD2_BRANCH"
          update_to_branch "$MOD3_PATH" "$MOD3_BRANCH"

      - name: Debug before commit
        working-directory: super
        run: |
          set -euo pipefail
          echo "== Git status =="
          git status
          echo "== Diff stat =="
          git diff --stat || true
          echo "== Submodule status =="
          git submodule status || true
          echo "== Last commit (superproject) =="
          git log -1 --oneline || true

      - name: Commit & push if changed
        working-directory: super
        run: |
          set -euo pipefail
          git add .gitmodules "$MOD1_PATH" "$MOD2_PATH" "$MOD3_PATH"

          if [ -n "$(git status --porcelain)" ]; then
            git commit -m "chore: sync submodules to latest main"
            git push origin "$TARGET_BRANCH"
            echo "Push OK."
          else
            echo "No changes to push."
          fi

      - name: Verify remote HEAD changed (debug)
        working-directory: super
        env:
          BRANCH: ${{ env.TARGET_BRANCH }}
        run: |
          set -euo pipefail
          echo "== Remote $BRANCH HEAD =="
          git ls-remote origin "refs/heads/$BRANCH" || true
