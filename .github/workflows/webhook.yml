name: Notify Mattermost (PR & Issues with Title + Description)

on:
  workflow_dispatch: {}
  pull_request:
    types: [opened, reopened, ready_for_review]
  issues:
    types: [opened, reopened]

permissions:
  contents: read
  pull-requests: read
  issues: read

jobs:
  notify:
    runs-on: ubuntu-latest
    env:
      REPO: ${{ github.repository }}
      REPO_URL: ${{ github.server_url }}/${{ github.repository }}

    steps:
      - name: Ensure jq exists
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y && sudo apt-get install -y jq
          fi

      # ===== PR 알림 =====
      - name: Build message for PR events
        if: github.event_name == 'pull_request'
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
          PR_TITLE:  ${{ github.event.pull_request.title }}
          PR_URL:    ${{ github.event.pull_request.html_url }}
          PR_BODY:   ${{ github.event.pull_request.body }}
          PR_USER:   ${{ github.event.pull_request.user.login }}
          ACTION:    ${{ github.event.action }}
          BASE:      ${{ github.event.pull_request.base.ref }}
          HEAD:      ${{ github.event.pull_request.head.ref }}
          REPO:      ${{ env.REPO }}
          REPO_URL:  ${{ env.REPO_URL }}
        run: |
          set -euo pipefail
          DESC="${PR_BODY:-내용 없음}"

          # 실제 개행을 포함한 텍스트 생성 (printf)
          TEXT=$(printf "**Repo:** [%s](%s)\n**Pull Request** #%s" "${REPO}" "${REPO_URL}" "${PR_NUMBER}")
          BODY=$(printf "**Description**\n%s\n\n---\n\n**작성자:** %s\n**상태:** %s\n**브랜치:** %s ← %s" \
                       "${DESC}" "${PR_USER}" "${ACTION}" "${BASE}" "${HEAD}")

          jq -n \
            --arg username "GitHub Bot" \
            --arg icon      "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png" \
            --arg text      "$TEXT" \
            --arg title     "$PR_TITLE" \
            --arg link      "$PR_URL" \
            --arg body      "$BODY" \
            '{
              username: $username,
              icon_url: $icon,
              text: $text,
              attachments: [
                {
                  title: $title,
                  title_link: $link,
                  text: $body
                }
              ]
            }' > msg.json

      # ===== 이슈 알림 =====
      - name: Build message for Issue events
        if: github.event_name == 'issues'
        env:
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          ISSUE_TITLE:  ${{ github.event.issue.title }}
          ISSUE_URL:    ${{ github.event.issue.html_url }}
          ISSUE_BODY:   ${{ github.event.issue.body }}
          ISSUE_USER:   ${{ github.event.issue.user.login }}
          ACTION:       ${{ github.event.action }}
          REPO:         ${{ env.REPO }}
          REPO_URL:     ${{ env.REPO_URL }}
        run: |
          set -euo pipefail
          DESC="${ISSUE_BODY:-내용 없음}"

          # 실제 개행 포함
          TEXT=$(printf "**Repo:** [%s](%s)\n**Issue** #%s" "${REPO}" "${REPO_URL}" "${ISSUE_NUMBER}")
          BODY=$(printf "**Description**\n%s\n\n---\n\n**작성자:** %s\n**상태:** %s" \
                       "${DESC}" "${ISSUE_USER}" "${ACTION}")

          jq -n \
            --arg username "GitHub Bot" \
            --arg icon      "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png" \
            --arg text      "$TEXT" \
            --arg title     "$ISSUE_TITLE" \
            --arg link      "$ISSUE_URL" \
            --arg body      "$BODY" \
            '{
              username: $username,
              icon_url: $icon,
              text: $text,
              attachments: [
                {
                  title: $title,
                  title_link: $link,
                  text: $body
                }
              ]
            }' > msg.json

      # ===== 시크릿 확인 =====
      - name: Validate secret availability
        id: guard
        run: |
          if [ -z "${{ secrets.MATTERMOST_WEBHOOK_URL }}" ]; then
            echo "Missing secret MATTERMOST_WEBHOOK_URL"
            echo "has_secret=false" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "has_secret=true" >> $GITHUB_OUTPUT
          fi

      # ===== 전송 =====
      - name: Send to Mattermost
        if: steps.guard.outputs.has_secret == 'true'
        run: |
          curl -sS -X POST -H "Content-Type: application/json" \
            -d @msg.json "${{ secrets.MATTERMOST_WEBHOOK_URL }}"
