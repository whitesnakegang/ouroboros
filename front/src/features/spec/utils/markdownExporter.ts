interface MarkdownExportData {
  method: string;
  url: string;
  description: string;
  tags?: string;
  owner?: string;
  headers?: Array<{ key: string; value: string }>;
  requestBody?: any;
  statusCodes?: Array<{ code: string; type: string; message: string }>;
}

export function exportToMarkdown(data: MarkdownExportData): string {
  const {
    method,
    url,
    description,
    tags,
    owner,
    headers,
    requestBody,
    statusCodes,
  } = data;

  // Method 배지 색상 매핑
  const methodColors: Record<string, string> = {
    GET: "green",
    POST: "blue",
    PUT: "orange",
    PATCH: "purple",
    DELETE: "red",
  };
  const color = methodColors[method.toUpperCase()] || "gray";

  let markdown = `# 📡 API 명세서\n\n`;

  // API 기본 정보 (Callout)
  markdown += `> 💡 **${method}** \`${url}\`\n`;
  markdown += `> ${description}\n\n`;

  // 메타 정보
  markdown += `### 📋 기본 정보\n\n`;
  markdown += `| 항목 | 내용 |\n`;
  markdown += `|------|------|\n`;
  markdown += `| **HTTP Method** | <span style="color:${color}">${method}</span> |\n`;
  markdown += `| **Endpoint** | \`${url}\` |\n`;

  if (tags) {
    markdown += `| **Tags** | ${tags} |\n`;
  }

  if (owner) {
    markdown += `| **Owner** | ${owner} |\n`;
  }

  markdown += `\n---\n\n`;

  // Request Headers
  if (headers && headers.length > 0) {
    markdown += `## 📤 Request\n\n`;
    markdown += `### Headers\n\n`;

    headers.forEach((header) => {
      markdown += `**${header.key}**\n`;
      markdown += `\`\`\`\n${header.value}\n\`\`\`\n\n`;
    });
  }

  // Request Body
  if (requestBody && requestBody.type !== "none") {
    markdown += `### Body\n\n`;
    markdown += `**Content-Type**: \`${
      requestBody.contentType || requestBody.type
    }\`\n\n`;

    if (
      requestBody.type === "json" ||
      requestBody.type === "form-data" ||
      requestBody.type === "x-www-form-urlencoded"
    ) {
      if (requestBody.fields && requestBody.fields.length > 0) {
        markdown += `| Field | Type | Value | Description |\n`;
        markdown += `|------|------|-------|-------------|\n`;
        requestBody.fields.forEach((field) => {
          markdown += `| ${field.key} | ${field.type} | ${
            field.value || "-"
          } | ${field.description || "-"} |\n`;
        });
        markdown += `\n`;
      }
    }
  }

  // Response
  if (statusCodes && statusCodes.length > 0) {
    markdown += `## 📥 Response\n\n`;
    markdown += `### Status Codes\n\n`;

    // Success codes
    const successCodes = statusCodes.filter((s) => s.type === "Success");
    if (successCodes.length > 0) {
      markdown += `#### ✅ Success\n\n`;
      successCodes.forEach((statusCode) => {
        markdown += `**${statusCode.code}** - ${statusCode.message}\n\n`;
      });
    }

    // Error codes
    const errorCodes = statusCodes.filter((s) => s.type === "Error");
    if (errorCodes.length > 0) {
      markdown += `#### ❌ Error\n\n`;
      errorCodes.forEach((statusCode) => {
        markdown += `**${statusCode.code}** - ${statusCode.message}\n\n`;
      });
    }
  }

  markdown += `\n---\n\n`;
  markdown += `*Generated by Ouroboros API Management*\n`;
  markdown += `📅 ${new Date().toLocaleDateString("ko-KR")}\n`;

  return markdown;
}

export function downloadMarkdown(
  content: string,
  filename: string = "api-spec.md"
) {
  const blob = new Blob([content], { type: "text/markdown" });
  const url = URL.createObjectURL(blob);
  const a = document.createElement("a");
  a.href = url;
  a.download = filename;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  URL.revokeObjectURL(url);
}
